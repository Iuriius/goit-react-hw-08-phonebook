{"version":3,"file":"static/js/12.c50188a5.chunk.js","mappings":"qRAEaA,EAAQC,EAAAA,EAAAA,MAAH,mNAWLC,EAAQD,EAAAA,EAAAA,MAAH,oMAULE,EAASF,EAAAA,EAAAA,OAAH,oZAoBNG,EAAgBH,EAAAA,EAAAA,KAAH,gI,SCrCbI,EAAO,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAe7B,OACE,UAACN,EAAD,CAAeO,SAdI,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAW,IAAIC,SAASH,EAAMI,QAC9BC,EAAOL,EAAMI,OACnB,EAAwBE,OAAOC,YAAYL,GAAnCM,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,GAAIb,EAASc,MAAK,SAAAC,GAAI,OAAIA,EAAKH,OAASA,CAAlB,IACpB,OAAOI,EAAAA,GAAAA,MAAA,UAAeJ,EAAf,4BAETd,GAASmB,EAAAA,EAAAA,IAAW,CAAEL,KAAAA,EAAMC,MAAAA,KAC5BJ,EAAKS,OACN,EAGwCC,aAAa,MAApD,WACE,0BACE,SAAC,KAAD,OAEF,4BACE,UAAC3B,EAAD,mBAEE,SAACE,EAAD,CACE0B,KAAK,OACLR,KAAK,OACLS,YAAY,aACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAChC,EAAD,qBAEE,SAACE,EAAD,CACE0B,KAAK,MACLR,KAAK,QACLS,YAAY,yBACZC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,WAId,SAAC7B,EAAD,CAAQyB,KAAK,SAAb,+BAGL,ECrDY5B,EAAQC,EAAAA,EAAAA,MAAH,mNAWLC,EAAQD,EAAAA,EAAAA,MAAH,oM,UCRLgC,EAAS,WACpB,IAAM3B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC,EAAD,oCAEE,SAAC,EAAD,CAAO2B,SAPU,SAAAtB,GACnBN,GAAS6B,EAAAA,EAAAA,GAAevB,EAAMI,OAAOoB,OACtC,EAKkCR,KAAK,OAAOC,YAAY,iBAG5D,EChBYQ,EAAYpC,EAAAA,EAAAA,GAAH,4DCATE,EAASF,EAAAA,EAAAA,OAAH,8YAoBNqC,EAAcrC,EAAAA,EAAAA,EAAH,yHAOXsC,EAAgBtC,EAAAA,EAAAA,KAAH,8CAIbuC,EAAcvC,EAAAA,EAAAA,GAAH,qGCvBXwC,EAAmB,SAAC,GAAkB,IAAhBjC,EAAe,EAAfA,SAC3BF,GAAWC,EAAAA,EAAAA,MAMjB,OACE,8BACGC,EAASkC,QACRlC,EAASmC,KAAI,SAAAC,GAAO,OAClB,UAACJ,EAAD,YACE,UAACF,EAAD,WACGM,EAAQxB,KADX,KACiB,SAACmB,EAAD,UAAgBK,EAAQvB,YAEzC,SAAC,EAAD,CACEO,KAAK,SACLiB,QAAS,kBAdOC,EAcmBF,EAAQE,QAbrDxC,GAASyC,EAAAA,EAAAA,IAAcD,IADG,IAAAA,CAcP,EAFX,sBAJgBF,EAAQE,GADR,KAe3B,EC9BYE,EAAe,WAC1B,IAAMC,GAAexC,EAAAA,EAAAA,IAAYyC,EAAAA,IAEjC,OACE,SAACb,EAAD,WACE,SAACI,EAAD,CAAkBjC,SAAUyC,KAGjC,ECDYE,EAAe,WAC1B,IAAM7C,GAAWC,EAAAA,EAAAA,MACX6C,GAAY3C,EAAAA,EAAAA,IAAY4C,EAAAA,IACxBC,GAAQ7C,EAAAA,EAAAA,IAAY8C,EAAAA,IACpB/C,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAM7B,OAJA8C,EAAAA,EAAAA,YAAU,WACRlD,GAASmD,EAAAA,EAAAA,MACV,GAAE,CAACnD,KAGF,iCACE,uCACA,SAACD,EAAD,IACC+C,IAAcE,IAAS,0CACvB9C,EAASkC,OAAS,IACjB,iCACE,sCACA,SAACT,EAAD,KACA,SAACe,EAAD,SAKT,C","sources":["components/Form/Form.styled.js","components/Form/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsListItem/ContactsListItem.styled.js","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/Pages/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 10px;\n  color: darkorchid;\n  text-shadow: 1px 1px 1px pink;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  width: 320px;\n  padding: 5px;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid pink;\n  box-shadow: rebeccapurple 1px 3px 3px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  margin-top: 20px;\n  color: snow;\n  text-shadow: darkslateblue 1px 1px 1px;\n  width: 150px;\n  line-height: 1.5rem;\n  background: pink;\n  border: none;\n  border-radius: 7px;\n  box-shadow: rebeccapurple 2px 2px 2px;\n  cursor: pointer;\n  transition: all 150ms ease 0s;\n\n  &:hover,\n  &:focus {\n    background: blueviolet;\n    box-shadow: 2px 5px 5px darkorchid;\n  }\n`;\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import toast, { Toaster } from 'react-hot-toast';\nimport { addContact } from '../../redux/operations';\nimport { selectContact } from '../../redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input, Button, FormContainer } from './Form.styled';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContact);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const form = event.target;\n    const { name, phone } = Object.fromEntries(formData);\n\n    if (contacts.some(item => item.name === name)) {\n      return toast.error(`${name} is already in contacts`);\n    }\n    dispatch(addContact({ name, phone }));\n    form.reset();\n  };\n\n  return (\n    <FormContainer onSubmit={handleSubmit} autoComplete=\"off\">\n      <div>\n        <Toaster />\n      </div>\n      <div>\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"phone\"\n            placeholder=\"Enter number 000-00-00\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n      </div>\n      <Button type=\"submit\">Add new contact</Button>\n    </FormContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 10px;\n  color: darkorchid;\n  text-shadow: 1px 1px 1px pink;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  width: 320px;\n  padding: 5px;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid pink;\n  box-shadow: rebeccapurple 1px 3px 3px;\n  outline: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { filterContacts } from '../../redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterChange = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input onChange={filterChange} type=\"text\" placeholder=\"Enter name\" />\n    </Label>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactUl = styled.ul`\n  margin-top: 20px;\n  padding: 0;\n`;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  margin: 5px;\n  color: snow;\n  text-shadow: darkslateblue 1px 1px 1px;\n  width: 70px;\n  line-height: 1.5rem;\n  background: pink;\n  border: none;\n  border-radius: 7px;\n  box-shadow: rebeccapurple 2px 2px 2px;\n  cursor: pointer;\n  transition: all 150ms ease 0s;\n\n  &:hover,\n  &:focus {\n    background: blueviolet;\n    box-shadow: 2px 5px 5px darkorchid;\n  }\n`;\n\nexport const ContactName = styled.p`\n  margin: 0;\n  font-size: larger;\n  color: darkorchid;\n  text-shadow: 1px 1px 0px lightgrey;\n`;\n\nexport const ContactNumber = styled.span`\n  margin-left: 15px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport {\n  ContactItem,\n  ContactName,\n  ContactNumber,\n  Button,\n} from './ContactsListItem.styled';\n\nexport const ContactsListItem = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {contacts.length &&\n        contacts.map(contact => (\n          <ContactItem key={contact.id}>\n            <ContactName>\n              {contact.name}:<ContactNumber>{contact.phone}</ContactNumber>\n            </ContactName>\n            <Button\n              type=\"button\"\n              onClick={() => handleDeleteContact(contact.id)}\n            >\n              Delete\n            </Button>\n          </ContactItem>\n        ))}\n    </>\n  );\n};\n\nContactsListItem.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n};\n","import { useSelector } from 'react-redux';\nimport { ContactUl } from './ContactsList.styled';\nimport { selectVisibleContacts } from '../../redux/selectors';\nimport { ContactsListItem } from '../ContactsListItem/ContactsListItem';\n\nexport const ContactsList = () => {\n  const contactsList = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactUl>\n      <ContactsListItem contacts={contactsList} />\n    </ContactUl>\n  );\n};\n","import { useEffect } from 'react';\nimport { Form } from '../Form/Form';\nimport { Filter } from '../Filter/Filter';\nimport { fetchContacts } from '../../redux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsList } from '../ContactsList/ContactsList';\nimport {\n  selectContact,\n  selectError,\n  selectIsLoading,\n} from '../../redux/selectors';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <Form />\n      {isLoading && !error && <b>Please wait...</b>}\n      {contacts.length > 0 && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </>\n      )}\n    </>\n  );\n};\n"],"names":["Label","styled","Input","Button","FormContainer","Form","dispatch","useDispatch","contacts","useSelector","selectContact","onSubmit","event","preventDefault","formData","FormData","target","form","Object","fromEntries","name","phone","some","item","toast","addContact","reset","autoComplete","type","placeholder","pattern","title","required","Filter","onChange","filterContacts","value","ContactUl","ContactName","ContactNumber","ContactItem","ContactsListItem","length","map","contact","onClick","id","deleteContact","ContactsList","contactsList","selectVisibleContacts","ContactsPage","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts"],"sourceRoot":""}